// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
        Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=instructionMuxOutput);
        Not(in=instruction[15], out=AFlag);
        And(a=instruction[15], b=instruction[12], out=compa);
        And(a=instruction[15], b=instruction[11], out=c1);
        And(a=instruction[15], b=instruction[10], out=c2);
        And(a=instruction[15], b=instruction[9], out=c3);
        And(a=instruction[15], b=instruction[8], out=c4);
        And(a=instruction[15], b=instruction[7], out=c5);
        And(a=instruction[15], b=instruction[6], out=c6);
        And(a=instruction[15], b=instruction[5], out=d1);
        And(a=instruction[15], b=instruction[4], out=d2);
        And(a=instruction[15], b=instruction[3], out=d3);
        And(a=instruction[15], b=instruction[2], out=j1);
        And(a=instruction[15], b=instruction[1], out=j2);
        And(a=instruction[15], b=instruction[0], out=j3);

        Or(a=AFlag, b=d1, out=loadRAFlag);
        ARegister(in=instructionMuxOutput, load=loadRAFlag, out=RAoutput);
        Mux16(a=RAoutput, b=inM, sel=compa, out=ALUInput1);
        DRegister(in=ALUOutput, load=d2, out=ALUInput2);
        
        ALU(x=ALUInput2, y=ALUInput1, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=ALUOutput, zr=ALUzr, ng=ALUng);

        Or(a=false, b=d3, out=writeM);
        Or16(a=false, b=ALUOutput, out=outM);
        Or16(a=false, b=RAoutput, out[0..14]=addressM);

        Xor(a=j1, b=ALUng, out=ngFlagTmp);
        Not(in=ngFlagTmp, out=ngFlagTmp1);
        And(a=ngFlagTmp1, b=j1, out=ngFlag);
        Xor(a=j2, b=ALUzr, out=zrFlagTmp);
        Not(in=zrFlagTmp, out=zrFlagTmp1);
        And(a=zrFlagTmp1, b=j2, out=zrFlag);
        Not(in=ALUng, out=ALUposTmp0);
        Not(in=ALUzr, out=ALUposTmp1);
        And(a=ALUposTmp0, b=ALUposTmp1, out=ALUpos);
        Xor(a=j3, b=ALUpos, out=posFlagTmp);
        Not(in=posFlagTmp, out=posFlagTmp1);
        And(a=posFlagTmp1, b=j3, out=posFlag);
        Or(a=ngFlag, b=zrFlag, out=tmp);
        Or(a=tmp, b=posFlag, out=loadPC);

        PC(in=RAoutput, reset=reset, inc=true, load=loadPC, out[0..14]=pc);
}